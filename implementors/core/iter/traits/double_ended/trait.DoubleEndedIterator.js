(function() {var implementors = {};
implementors["anyhow"] = [{"text":"impl DoubleEndedIterator for <a class=\"struct\" href=\"anyhow/struct.Chain.html\" title=\"struct anyhow::Chain\">Chain</a>&lt;'_&gt;","synthetic":false,"types":["anyhow::Chain"]}];
implementors["enumset"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"enumset/trait.EnumSetType.html\" title=\"trait enumset::EnumSetType\">EnumSetType</a>&gt; DoubleEndedIterator for <a class=\"struct\" href=\"enumset/struct.EnumSetIter.html\" title=\"struct enumset::EnumSetIter\">EnumSetIter</a>&lt;T&gt;","synthetic":false,"types":["enumset::EnumSetIter"]}];
implementors["heapless"] = [{"text":"impl&lt;'a, T, const N:&nbsp;usize&gt; DoubleEndedIterator for <a class=\"struct\" href=\"heapless/spsc/struct.Iter.html\" title=\"struct heapless::spsc::Iter\">Iter</a>&lt;'a, T, N&gt;","synthetic":false,"types":["heapless::spsc::Iter"]},{"text":"impl&lt;'a, T, const N:&nbsp;usize&gt; DoubleEndedIterator for <a class=\"struct\" href=\"heapless/spsc/struct.IterMut.html\" title=\"struct heapless::spsc::IterMut\">IterMut</a>&lt;'a, T, N&gt;","synthetic":false,"types":["heapless::spsc::IterMut"]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; DoubleEndedIterator for <a class=\"struct\" href=\"memchr/struct.Memchr.html\" title=\"struct memchr::Memchr\">Memchr</a>&lt;'a&gt;","synthetic":false,"types":["memchr::memchr::iter::Memchr"]},{"text":"impl&lt;'a&gt; DoubleEndedIterator for <a class=\"struct\" href=\"memchr/struct.Memchr2.html\" title=\"struct memchr::Memchr2\">Memchr2</a>&lt;'a&gt;","synthetic":false,"types":["memchr::memchr::iter::Memchr2"]},{"text":"impl&lt;'a&gt; DoubleEndedIterator for <a class=\"struct\" href=\"memchr/struct.Memchr3.html\" title=\"struct memchr::Memchr3\">Memchr3</a>&lt;'a&gt;","synthetic":false,"types":["memchr::memchr::iter::Memchr3"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()