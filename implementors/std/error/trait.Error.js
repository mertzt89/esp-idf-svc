(function() {var implementors = {};
implementors["embedded_io"] = [{"text":"impl&lt;E:&nbsp;Debug&gt; Error for <a class=\"enum\" href=\"embedded_io/blocking/enum.ReadExactError.html\" title=\"enum embedded_io::blocking::ReadExactError\">ReadExactError</a>&lt;E&gt;","synthetic":false,"types":["embedded_io::blocking::ReadExactError"]},{"text":"impl&lt;E:&nbsp;Debug&gt; Error for <a class=\"enum\" href=\"embedded_io/blocking/enum.WriteFmtError.html\" title=\"enum embedded_io::blocking::WriteFmtError\">WriteFmtError</a>&lt;E&gt;","synthetic":false,"types":["embedded_io::blocking::WriteFmtError"]}];
implementors["embedded_svc"] = [{"text":"impl&lt;E&gt; Error for <a class=\"struct\" href=\"embedded_svc/errors/wrap/struct.WrapError.html\" title=\"struct embedded_svc::errors::wrap::WrapError\">WrapError</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Display + Debug,&nbsp;</span>","synthetic":false,"types":["embedded_svc::errors::wrap::WrapError"]},{"text":"impl&lt;E1, E2&gt; Error for <a class=\"enum\" href=\"embedded_svc/errors/wrap/enum.EitherError.html\" title=\"enum embedded_svc::errors::wrap::EitherError\">EitherError</a>&lt;E1, E2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: Display + Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: Display + Debug,&nbsp;</span>","synthetic":false,"types":["embedded_svc::errors::wrap::EitherError"]},{"text":"impl&lt;E1, E2, E3&gt; Error for <a class=\"enum\" href=\"embedded_svc/errors/wrap/enum.EitherError3.html\" title=\"enum embedded_svc::errors::wrap::EitherError3\">EitherError3</a>&lt;E1, E2, E3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E3: Debug + Display,&nbsp;</span>","synthetic":false,"types":["embedded_svc::errors::wrap::EitherError3"]},{"text":"impl&lt;E1, E2, E3, E4&gt; Error for <a class=\"enum\" href=\"embedded_svc/errors/wrap/enum.EitherError4.html\" title=\"enum embedded_svc::errors::wrap::EitherError4\">EitherError4</a>&lt;E1, E2, E3, E4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E3: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E4: Debug + Display,&nbsp;</span>","synthetic":false,"types":["embedded_svc::errors::wrap::EitherError4"]},{"text":"impl&lt;E1, E2, E3, E4, E5&gt; Error for <a class=\"enum\" href=\"embedded_svc/errors/wrap/enum.EitherError5.html\" title=\"enum embedded_svc::errors::wrap::EitherError5\">EitherError5</a>&lt;E1, E2, E3, E4, E5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E3: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E4: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E5: Debug + Display,&nbsp;</span>","synthetic":false,"types":["embedded_svc::errors::wrap::EitherError5"]},{"text":"impl&lt;E1, E2, E3, E4, E5, E6&gt; Error for <a class=\"enum\" href=\"embedded_svc/errors/wrap/enum.EitherError6.html\" title=\"enum embedded_svc::errors::wrap::EitherError6\">EitherError6</a>&lt;E1, E2, E3, E4, E5, E6&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E3: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E4: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E5: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E6: Debug + Display,&nbsp;</span>","synthetic":false,"types":["embedded_svc::errors::wrap::EitherError6"]},{"text":"impl&lt;E1, E2, E3, E4, E5, E6, E7&gt; Error for <a class=\"enum\" href=\"embedded_svc/errors/wrap/enum.EitherError7.html\" title=\"enum embedded_svc::errors::wrap::EitherError7\">EitherError7</a>&lt;E1, E2, E3, E4, E5, E6, E7&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E3: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E4: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E5: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E6: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E7: Debug + Display,&nbsp;</span>","synthetic":false,"types":["embedded_svc::errors::wrap::EitherError7"]},{"text":"impl&lt;E1, E2, E3, E4, E5, E6, E7, E8&gt; Error for <a class=\"enum\" href=\"embedded_svc/errors/wrap/enum.EitherError8.html\" title=\"enum embedded_svc::errors::wrap::EitherError8\">EitherError8</a>&lt;E1, E2, E3, E4, E5, E6, E7, E8&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E3: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E4: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E5: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E6: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E7: Debug + Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;E8: Debug + Display,&nbsp;</span>","synthetic":false,"types":["embedded_svc::errors::wrap::EitherError8"]}];
implementors["esp_idf_hal"] = [{"text":"impl Error for <a class=\"struct\" href=\"esp_idf_hal/can/struct.CanError.html\" title=\"struct esp_idf_hal::can::CanError\">CanError</a>","synthetic":false,"types":["esp_idf_hal::can::CanError"]},{"text":"impl Error for <a class=\"struct\" href=\"esp_idf_hal/can/struct.Can02Error.html\" title=\"struct esp_idf_hal::can::Can02Error\">Can02Error</a>","synthetic":false,"types":["esp_idf_hal::can::Can02Error"]},{"text":"impl Error for <a class=\"struct\" href=\"esp_idf_hal/i2c/struct.I2cError.html\" title=\"struct esp_idf_hal::i2c::I2cError\">I2cError</a>","synthetic":false,"types":["esp_idf_hal::i2c::I2cError"]},{"text":"impl Error for <a class=\"struct\" href=\"esp_idf_hal/serial/struct.SerialError.html\" title=\"struct esp_idf_hal::serial::SerialError\">SerialError</a>","synthetic":false,"types":["esp_idf_hal::serial::SerialError"]},{"text":"impl Error for <a class=\"struct\" href=\"esp_idf_hal/spi/struct.SpiError.html\" title=\"struct esp_idf_hal::spi::SpiError\">SpiError</a>","synthetic":false,"types":["esp_idf_hal::spi::SpiError"]}];
implementors["esp_idf_svc"] = [{"text":"impl Error for <a class=\"struct\" href=\"esp_idf_svc/errors/struct.EspIOError.html\" title=\"struct esp_idf_svc::errors::EspIOError\">EspIOError</a>","synthetic":false,"types":["esp_idf_svc::errors::EspIOError"]}];
implementors["esp_idf_sys"] = [{"text":"impl Error for <a class=\"struct\" href=\"esp_idf_sys/struct.EspError.html\" title=\"struct esp_idf_sys::EspError\">EspError</a>","synthetic":false,"types":["esp_idf_sys::error::EspError"]}];
implementors["log"] = [{"text":"impl Error for <a class=\"struct\" href=\"log/struct.SetLoggerError.html\" title=\"struct log::SetLoggerError\">SetLoggerError</a>","synthetic":false,"types":["log::SetLoggerError"]},{"text":"impl Error for <a class=\"struct\" href=\"log/struct.ParseLevelError.html\" title=\"struct log::ParseLevelError\">ParseLevelError</a>","synthetic":false,"types":["log::ParseLevelError"]}];
implementors["serde"] = [{"text":"impl Error for <a class=\"struct\" href=\"serde/de/value/struct.Error.html\" title=\"struct serde::de::value::Error\">Error</a>","synthetic":false,"types":["serde::de::value::Error"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()